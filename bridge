#!/usr/bin/env php
<?php
/* Copyright 2024 Romain "Artefact2" Dal Maso <romain.dalmaso@artefact2.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

pcntl_async_signals(false);

$config = json_decode(file_get_contents($argv[1] ?? __DIR__.'/config.json'), true);
if(!is_array($config)) {
	fprintf(STDERR, "%s: no config file; please copy config.json.example to config.json\n", $argv[0]);
	die(1);
}
$config['version'] = trim(shell_exec('git -C '.escapeshellarg(__DIR__).' describe --always --abbrev=7'));

function msg(...$args): void {
	$fmt = array_shift($args);
	$fmt = "================= ".$fmt;
	fprintf(STDERR, $fmt, ...$args);
}

function spawn_task(callable $t): int {
	if(($pid = pcntl_fork()) !== 0) {
		return $pid;
	}

	die((int)$t());
}

function with_heartbeat(callable $c) {
	global $config;
	if(!isset($config['heartbeat_path'])) {
		$runtime_dir = getenv('XDG_RUNTIME_DIR');
		if(!$runtime_dir || !is_dir($runtime_dir) || !is_writable($runtime_dir)) {
			$runtime_dir = sys_get_temp_dir();
			fprintf(STDERR, "%s: XDG_RUNTIME_DIR unset or incorrect, falling back to %s\n", $argv[0], $runtime_dir);
		}
		$config['heartbeat_path'] = $runtime_dir.'/horde-bridge.'.posix_getpid();
	}
	$fp = fopen($config['heartbeat_path'], 'c+');
	flock($fp, LOCK_EX);
	$line = fgets($fp);
	if($line === false) {
		$hb = [];
	} else {
		$hb = json_decode($line, true);
	}
	rewind($fp);
	ftruncate($fp, 0);
	fwrite($fp, json_encode($c($hb)));
	fclose($fp);
}

function post(string $uri, array $json, array $headers = []): array|false {
	array_unshift($headers, 'Content-Type: application/json');
	$ctx = stream_context_create([
		'http' => [
			'method' => 'POST',
			'header' => implode("\r\n", $headers),
			'content' => json_encode($json),
			'timeout' => 300,
		],
	]);
	$ans = file_get_contents($uri, false, $ctx);
	if($ans !== false) {
		$ans = json_decode($ans, true);
	}
	return $ans;
}

$server_pid = spawn_task(function() use($config) {
	/* Ignore termination signals, let our parent KILL us when pending requests have completed */
	pcntl_signal(SIGTERM, SIG_IGN);
	pcntl_signal(SIGINT, SIG_IGN);
	pcntl_signal(SIGHUP, SIG_IGN);

	msg("spawning llama.cpp server\n");
	chdir(__DIR__);
	$cmd = $config['server_command'];
	$cmd .= ' --host 127.0.0.1 --port '.$config['server_port'];
	$cmd .= ' -np '.$config['server_slots'];
	$cmd .= ' -c '.($config['server_slots'] * $config['advertised_max_context_length']);
	$cmd .= ' --log-disable --slots-endpoint-disable >/dev/null'; /* For privacy and legal deniability */
	passthru($cmd, $ret_code);
	return $ret_code;
});

do {
	sleep(2);
	$status = @json_decode(file_get_contents("http://127.0.0.1:".$config['server_port']."/health"), true);
} while(($status['status'] ?? "error") !== "ok");
msg("server loaded ok\n");

$hb_last_ts = microtime(true);
with_heartbeat(function(array $hb) use($hb_last_ts): array {
	return [
		/* timestamp, num_requests, num_kudos, num_evaluated, num_predicted */
		'start' => [ $hb_last_ts, 0, 0, 0, 0 ],
		'since' => [ $hb_last_ts, 0, 0, 0, 0 ],
	];
});

$workers = [];
for($i = 0; $i < $config['workers']; ++$i) {
	$work = function() use($config, $i) {
		$generation = post($config['horde_root'].'/api/v2/generate/text/pop', [
			'bridge_agent' => 'horde-bridge-lcpp-server/'.$config['version'],
			'name' => $config['worker_name'],
			'models' => [ $config['advertised_model'] ],
			'max_length' => $config['advertised_max_length'],
			'max_context_length' => $config['advertised_max_context_length'],
			'priority_usernames' => $config['priority_usernames'],
			'softprompts' => [],
			'threads' => $config['advertised_threads'],
			'amount' => 1,
		], ['apikey: '.$config['worker_api_key']]);
		if(array_key_exists('id', $generation) && $generation['id'] === null) {
			/* Queue is empty, just idle silently */
			sleep(5);
			return 0;
		}
		if(!isset($generation['payload']['prompt'])) {
			msg("got unexpected generation request: %s\n", json_encode($generation));
			sleep(5);
			return 0;
		}

		/* koboldcpp doesn't do anything with these, so it's probably safe to ignore */
		unset(
			$generation['payload']['rep_pen_slope'],
			$generation['payload']['frmtadsnsp'],
			$generation['payload']['frmtrmblln'],
			$generation['payload']['frmtrmspch'],
			$generation['payload']['frmttriminc']
		);

		$payload = array_merge($defaults = [
			'prompt' => '',
			'n' => 1,
			'singleline' => false,
			'use_default_badwordsids' => false, /* if true, ignore EOS */
			'stop_sequence' => [],
			'sampler_order' => [6,0,1,3,4,2,5],
			'max_length' => 0,
			'max_context_length' => 0,
			'rep_pen' => 1.1,
			'rep_pen_range' => 64,
			'temperature' => 0.8,
			'tfs' => 1.0,
			'top_k' => 0,
			'top_p' => 0.95,
			'typical' => 1.0,
			'min_p' => 0.05,
			'top_a' => 0,
			'dynatemp_range' => 0.0,
			'dynatemp_exponent' => 1.0,
			'smoothing_factor' => 0.0,
		], $generation['payload']);

		$unsupported = [];
		foreach($generation['payload'] as $k => $v) {
			if(isset($defaults[$k])) continue;
			$unsupported[$k] = $v;
		}
		if($unsupported !== []) {
			msg("request %s: unknown/unsupported payload keys: %s\n",
			    $generation['id'], json_encode($unsupported));
		}

		if($payload['singleline']) {
			$payload['stop_sequence'][] = "\n";
			$payload['stop_sequence'][] = "\r\n";
		}

		if($payload['n'] !== 1) {
			msg("request %s: ignoring n=%d\n",
			    $generation['id'], $payload['n']);
		}
		if($payload['rep_pen'] > 1 && $payload['rep_pen_range'] > 0 && $payload['sampler_order'][0] !== 6) {
			if(!in_array(6, $payload['sampler_order'])) {
				/* No rep_pen requested at all, we can turn it off ourselves */
				$payload['rep_pen'] = 1;
				$payload['rep_pen_range'] = 0;
			} else {
				msg("request %s: ignoring rep_pen sampler order\n", $generation['id']);
			}
		}
		if($payload['smoothing_factor'] > 0) {
			msg("request %s: ignoring smoothing_factor=%.3f\n", $generation['id'], $payload['smoothing_factor']);
		}

		$n_predict = min($config['advertised_max_length'], $payload['max_length']);
		$n_ctx = min($config['advertised_max_context_length'], $payload['max_context_length']);
		if(strlen($payload['prompt']) > $n_ctx) {
			/* Prompt might need trimming */
			$tokens = post('http://127.0.0.1:'.$config['server_port'].'/tokenize', [
				'content' => $payload['prompt'],
			])['tokens'];
			$max_tokens = max(1, $n_ctx - $n_predict);
			$tokens = array_slice($tokens, -$max_tokens);
			$payload['prompt'] = post('http://127.0.0.1:'.$config['server_port'].'/detokenize', [
				'tokens' => $tokens,
			])['content'];
		}

		$ans = post('http://127.0.0.1:'.$config['server_port'].'/completion', [
			'prompt' => $payload['prompt'],
			'n_predict' => $n_predict,
			'n_keep' => $n_ctx - $n_predict,
			'repeat_penalty' => $payload['rep_pen'],
			'repeat_last_n' => $payload['rep_pen_range'],
			'temperature' => $payload['temperature'],
			'tfs_z' => $payload['tfs'],
			'top_k' => $payload['top_k'],
			'top_p' => $payload['top_p'],
			'typical_p' => $payload['typical'],
			'min_p' => $payload['min_p'],
			'top_a' => $payload['top_a'],
			'stop' => $payload['stop_sequence'],
			'ignore_eos' => $payload['use_default_badwordsids'],
			'dynatemp_range' => $payload['dynatemp_range'],
			'dynatemp_exponent' => $payload['dynatemp_exponent'],
			'samplers' => (function() use($payload) {
				/* from lite.koboldai.net: 0=topk, 1=topa, 2=topp/minp, 3=tfs, 4=typ, 5=temp, 6=reppen */
				/* https://github.com/ggerganov/llama.cpp/blob/master/common/common.cpp#L1137 */
				/* XXX: rep_pen is always first */
				$samplers = [];
				foreach($payload['sampler_order'] as $s) {
					if($s === 0 && $payload['top_k'] > 0) {
						$samplers[] = 'top_k';
					} else if($s === 1 && $payload['top_a'] > 0) {
						$samplers[] = 'top_a';
					} else if($s === 2) {
						if($payload['top_p'] < 1) {
							$samplers[] = 'top_p';
						}
						if($payload['min_p'] > 0) {
							$samplers[] = 'min_p';
						}
					} else if($s === 3 && $payload['tfs'] < 1.0) {
						$samplers[] = 'tfs_z';
					} else if($s === 4 && $payload['typical'] < 1.0) {
						$samplers[] = 'typical_p';
					} else if($s === 5) {
						$samplers[] = 'temperature';
					}
				}
				return $samplers;
			})(),
		]);
		if(!isset($ans['content'])) {
			msg("unexpected reply from llama.cpp server: %s\n",
			    json_encode($ans));
			return 1;
		}

		$horde_ans = post($config['horde_root'].'/api/v2/generate/text/submit', [
			'id' => $generation['id'],
			'generation' => $ans['content'],
			'state' => 'ok',
		], ['apikey: '.$config['worker_api_key']]);
		if(!isset($horde_ans['reward'])) {
			msg("unexpected reply from /submit: %s\n",
			    json_encode($horde_ans));
			return 1;
		}

		printf("worker %d submitted %s, evaluated %d/%d (%.1fT/s) and predicted %d/%d (%.1fT/s) tokens, got %.2f kudos\n",
		       $i,
		       $generation['id'],
		       $ans['timings']['prompt_n'], $n_ctx,
		       $ans['timings']['prompt_per_second'],
		       $ans['timings']['predicted_n'], $n_predict,
		       $ans['timings']['predicted_per_second'],
		       $horde_ans['reward']);

		spawn_task(function() use($ans, $horde_ans) {
			with_heartbeat(function(array $hb) use($ans, $horde_ans): array {
				foreach($hb as $k => &$v) {
					$v[1] += 1;
					$v[2] += $horde_ans['reward'];
					$v[3] += $ans['timings']['prompt_n'];
					$v[4] += $ans['timings']['predicted_n'];
				}
				return $hb;
			});
			return 0;
		});
		pcntl_waitpid(-1, $status, WNOHANG);

		return 0;
	};

	$workers[] = spawn_task(function() use($config, $work) {
		$stop = false;
		$terminate = function() use(&$stop) {
			$stop = true;
		};
		pcntl_signal(SIGTERM, $terminate);
		pcntl_signal(SIGINT, $terminate);
		pcntl_signal(SIGHUP, $terminate);
		while($stop === false) {
			if($work() !== 0) {
				return 1;
			}
			pcntl_signal_dispatch();
		}
		return 0;
	});
}
msg("spawned %d worker processes\n", $config['workers']);

$stop = false;
$terminate = function() use(&$stop, $config, $workers, $server_pid) {
	msg("got termination signal, waiting for current generation(s) to end...\n");
	$stop = true;
	foreach($workers as $i => $pid) {
		for($i = 0; $i < 60; ++$i) {
			if(pcntl_waitpid($pid, $status) === 0) {
				sleep(1);
				continue;
			}
			msg("worker %d exited with code %d\n", $i, $status);
			continue 2;
		}
		msg("worker %d seems stuck, continuing anyway\n", $i);
	}
	unlink($config['heartbeat_path']);
	posix_kill(0, SIGKILL);
};
pcntl_signal(SIGTERM, $terminate);
pcntl_signal(SIGINT, $terminate);
pcntl_signal(SIGHUP, $terminate);

while($stop === false) {
	if(pcntl_waitpid(-1, $status, WNOHANG) !== 0 && $status !== 0) {
		msg("one of our children exited abnormally, terminating now\n");
		posix_kill(0, SIGTERM);
	}
	pcntl_signal_dispatch();
	sleep(10);

	if(($ts = microtime(true)) - $hb_last_ts >= 300) {
		with_heartbeat(function(array $hb) use($ts): array {
			$f = function(array $data, string $label) use($ts) {
				for($k = 1; $k <= 4; ++$k) {
					$data[$k] /= ($ts - $data[0]);
				}
				msg("heartbeat: %.1freqs/hr, %.1fkudos/hr, %.1fT/s evaluated avg, %.1fT/s predicted avg %s\n",
				    $data[1] * 3600.0, $data[2] * 3600.0, $data[3], $data[4], $label);
			};

			$f($hb['start'], 'since start');
			$f($hb['since'], 'in the last 5 minutes');
			$hb['since'] = [ $ts, 0, 0, 0, 0 ];
			return $hb;
		});
		$hb_last_ts = $ts;
	}
}
